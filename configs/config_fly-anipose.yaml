data:
  # resize dimensions to streamline model creation
  image_resize_dims:
    height: 256 # if doesn't work well try both on 384
    width: 256
  # ABSOLUTE path to data directory
  data_dir: /tmp/data/fly-anipose
  # data_dir: /teamspace/studios/data/fly-anipose
  # ABSOLUTE path to unlabeled videos' directory
  video_dir: /tmp/data/fly-anipose/videos
  # video_dir: /teamspace/studios/data/fly-anipose/videos
  # camera calibration files location
  camera_params_file: /tmp/data/fly-anipose/calibrations.csv
  # camera_params_file: /teamspace/studios/data/fly-anipose/calibrations.csv
  # location of labels; for example script, this should be relative to `data_dir`]
  csv_file:
    - CollectedData_Cam-A.csv
    - CollectedData_Cam-B.csv
    - CollectedData_Cam-C.csv
    - CollectedData_Cam-D.csv
    - CollectedData_Cam-E.csv
    - CollectedData_Cam-F.csv
  view_names:
    - Cam-A
    - Cam-B
    - Cam-C
    - Cam-D
    - Cam-E
    - Cam-F
  
  
  # downsample heatmaps - 2 | 3
  downsample_factor: 2
  # total number of keypoints
  num_keypoints: 30
  # keypoint names
  keypoint_names:
    - L1A
    - L1B
    - L1C
    - L1D
    - L1E
    - L2A
    - L2B
    - L2C
    - L2D
    - L2E
    - L3A
    - L3B
    - L3C
    - L3D
    - L3E
    - R1A
    - R1B
    - R1C
    - R1D
    - R1E
    - R2A
    - R2B
    - R2C
    - R2D
    - R2E
    - R3A
    - R3B
    - R3C
    - R3D
    - R3E
  # for mirrored setups with all keypoints defined in same csv file, define matching
  # columns for different keypoints (assumes x-y-x-y interleaving)
  # each list corresponds to a single view, so in the example below there are 2 views
  # keypoint 0 is from view 0 and matches up with keypoint 8 from view 2
  # columns that correspond to keypoints only labeled in a single view are omitted
  # TODO: what if a keypoint is labeled in more than 1 but not all views?
  # this info is only used for the multiview pca loss
  mirrored_column_matches: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29] # saying use all keypoints 
  columns_for_singleview_pca: []

  skeleton:
    - ['L1A', 'L1B']
    - ['L1B', 'L1C']
    - ['L1C', 'L1D']
    - ['L1D', 'L1E']
    - ['L2A', 'L2B']
    - ['L2B', 'L2C']
    - ['L2C', 'L2D']
    - ['L2D', 'L2E']
    - ['L3A', 'L3B']
    - ['L3B', 'L3C']
    - ['L3C', 'L3D']
    - ['L3D', 'L3E']
    - ['R1A', 'R1B']
    - ['R1B', 'R1C']
    - ['R1C', 'R1D']
    - ['R1D', 'R1E']
    - ['R2A', 'R2B']
    - ['R2B', 'R2C']
    - ['R2C', 'R2D']
    - ['R2D', 'R2E']
    - ['R3A', 'R3B']
    - ['R3B', 'R3C']
    - ['R3C', 'R3D']
    - ['R3D', 'R3E']




training:
  # select from one of several predefined image/video augmentation pipelines
  # default- resizing only
  # dlc- imgaug pipeline implemented in DLC 2.0 package
  # dlc-top-down- dlc augmentations plus vertical and horizontal flips
  imgaug: dlc # dlc-mv for multiple views 
  # Control whether to use 3D augmentations for multiview models when camera parameters are present
  # True: Use dlc-mv (no 2D geometric transforms) when camera params exist
  # False: Use specified imgaug pipeline regardless of camera params
  # null/None: Default behavior (use dlc-mv when camera params exist)
  use_3d_augmentations: True  # This allows you to use regular dlc augmentations even with camera params
  # batch size of labeled data during training
  train_batch_size: 8 # for the supervised one it is 8 for the ctx 4 
  # batch size of labeled data during validation
  val_batch_size: 16
  # batch size of labeled data during test
  test_batch_size: 1 #16
  # fraction of labeled data used for training
  train_prob: 0.95
  # fraction of labeled data used for validation (remaining used for test)
  val_prob: 0.05
  # <=1 - fraction of total train frames (determined by `train_prob`) used for training
  # >1 - number of total train frames used for training
  train_frames: 1
  # number of gpus to train a single model
  num_gpus: 1
  # number of cpu workers for data loaders
  num_workers: 4
  # epochs over which to assess validation metrics for early stopping
  early_stop_patience: 3
  # epoch at which backbone network weights begin updating
  unfreezing_epoch: 20
  # max training epochs; training may exit before due to early stopping
  min_epochs: 300
  max_epochs: 300
  # frequency to log training metrics (one step is one batch)
  log_every_n_steps: 10
  # frequency to log validation metrics
  check_val_every_n_epoch: 5
  # rng seed for labeled batches
  rng_seed_data_pt: 0
  # rng seed for weight initialization
  rng_seed_model_pt: 0
  # optimizer: Adam | AdamW.ada
  # Recommended to use Adam for resnet backbones, and AdamW for ViT backbones.
  optimizer: Adam
  optimizer_params:
    learning_rate: 0.00005 #(1e-3) # was 0.001 # 0.00005
  # learning rate scheduler
  # multisteplr | [todo - reducelronplateau]
  lr_scheduler: multisteplr
  lr_scheduler_params:
    multisteplr:
      milestones: [2000, 3000, 4000] 
      gamma: 0.5
  uniform_heatmaps_for_nan_keypoints: true

model:
  # list of unsupervised losses
  # "pca_singleview" | "pca_multiview" | "temporal" | "unimodal_mse" | "unimodal_kl" | "supervised_pairwise_projections"
  losses_to_use: []
  # backbone network:
  # resnet18 | resnet34 | resnet50 | resnet101 | resnet152 | resnet50_contrastive
  # resnet50_animalpose_apose | resnet50_animal_ap10k
  # resnet50_human_jhmdb | resnet50_human_res_rle | resnet50_human_top_res
  # efficientnet_b0 | efficientnet_b1 | efficientnet_b2
  backbone: vits_dino # in general use resnet50_animal_ap10k
  # prediction mode - "heatmap" | "regression" | "heatmap_mhcrnn" | "heatmap_multiview" 
  model_type: heatmap_multiview_transformer #heatmap # this is for the vitb_imagenet
  # head mode - "heatmap_cnn" | "feature_transformer" | "feature_transformer_learnable" | "feature_transformer_learnable_crossview" | "trans_fusion"
  head: heatmap_cnn #heatmap_cnn #feature_transformer_learnable_crossview # need to comment out for supervised model 
  # which heatmap loss to use
  # "mse" | "kl" | "js"
  heatmap_loss_type: mse
  # tt expt name
  model_name: test_model

# batch sizes for unlabeled data (for unsupervised data during training and prediction on videos)
dali:
  general:
    seed: 123456
  base:
    train: 
      sequence_length: 8 # number of consecutive frames 
    predict:
      sequence_length: 16 #128 # for videos - number of consecutive frames for inference each video alone 
  context:
    train:
      batch_size: 16
    predict:
      sequence_length: 96
  
losses:
  # loss = projection onto the discarded eigenvectors
  pca_multiview:
    # weight in front of PCA loss
    log_weight: 6.0 # the weight we want for the pca loss. the smaller it is the higher the weight 
    # predictions whould lie within the low-d subspace spanned by these components
    components_to_keep: 3
    # absolute error (in pixels) below which pca loss is zeroed out; if not null, this
    # parameter takes precedence over `empirical_epsilon_percentile`
    epsilon: null 
  # loss = projection onto the discarded eigenvectors
  pca_singleview:
    # weight in front of PCA loss
    log_weight: 5.0
    # predictions whould lie within the low-d subspace spanned by components that describe this fraction of variance
    components_to_keep: 0.99
    # absolute error (in pixels) below which pca loss is zeroed out; if not null, this
    # parameter takes precedence over `empirical_epsilon_percentile`
    epsilon: null
  # loss = norm of distance between successive timepoints
  temporal:
    # weight in front of temporal loss
    log_weight: 5.0
    # for epsilon insensitive rectification
    # (in pixels; diffs below this are not penalized)
    epsilon: 20.0
    # nan removal value.
    # (in prob; heatmaps with max prob values are removed)
    prob_threshold: 0.05
  
  supervised_pairwise_projections:
    # weight in front of pairwise projection loss
    log_weight: 5.0
    # absolute error (in pixels) below which pairwise projection loss is zeroed out; if not null, this
    # parameter takes precedence over `empirical_epsilon_percentile`
    epsilon: null


eval:
  # predict? used in scripts/train_hydra.py
  predict_vids_after_training: true
  # str with an absolute path to a directory containing videos for prediction.
  test_videos_directory: ${data.video_dir}
  # save labeled .mp4? used in scripts/train_hydra.py and scripts/predict_new_vids.py
  save_vids_after_training: false
  # matplotlib sequential or diverging colormap name for prediction visualization
  # sequential options: viridis, plasma, magma, inferno, cool, etc.
  # diverging options: RdBu, coolwarm, Spectral, etc.
  colormap: "cool"
  # confidence threshold for plotting a vid
  confidence_thresh_for_vid: 0.90

  # paths to the hydra config files in the output folder, OR absolute paths to such folders.
  # used in scripts/predict_new_vids.py and scripts/create_fiftyone_dataset.py
  hydra_paths: [" "]

  fiftyone:
    # will be the name of the dataset (Mongo DB) created by FiftyOne
    dataset_name: test
    # if you want to manually provide a different model name to be displayed in FiftyOne
    model_display_names: ["test_model"]
    # whether to launch the app from the script (True), or from ipython (and have finer control over the outputs)
    launch_app_from_script: false
    remote: true # for LAI, must be False
    address: 127.0.0.1 # ip to launch the app on.
    port: 5151 # port to launch the app on.

callbacks:
  anneal_weight:
    attr_name: total_unsupervised_importance
    init_val: 0.0
    increase_factor: 0.01
    final_val: 1.0
    freeze_until_epoch: 0
